# .gitlab-ci.yml

stages:
  - deploy

deploy_studyshare_stack:
  stage: deploy
  image: docker/compose:latest # Uses an image that has docker-compose pre-installed
  tags:
    - docker-compose # Make sure this tag matches the tag you assigned to your GitLab Runner
  variables:
    DOCKER_HOST: "unix:///var/run/docker.sock"
    HTTP_PROXY: "http://proxy.hof-university.de:3128"
    HTTPS_PROXY: "http://proxy.hof-university.de:3128"
    NO_PROXY: "localhost,127.0.0.1,minio,mariadb,backend,frontend,.internal,172.16.0.0/12,192.168.0.0/16" 

  script:
    - echo "Host VM Time $(date)" # For debugging
    - echo "Verifying Docker and Docker Compose versions..."
    - docker --version
    - docker-compose --version

    # Ensure local Docker networks and volumes are not conflicting if running multiple times
    # Optional: Prune unused Docker networks and volumes (be careful with this on shared systems)
    # - docker network prune -f
    # - docker volume prune -f

    - echo "Pulling latest versions of images specified with 'image:' key (e.g., mariadb, minio)..."
    - docker-compose pull

    - echo "Building services defined with 'build:' key (backend, frontend)..."
    # The --pull flag ensures that base images in your Dockerfiles are updated.
    - docker-compose build --pull 

    - echo "Bringing up the StudyShare stack in detached mode..."
    - docker-compose up -d

    - echo "Waiting a few seconds for services to initialize..."
    - sleep 10 # Adjust as needed, or implement proper health checks

    - echo "Current status of the StudyShare stack:"
    - docker-compose ps

    - echo "StudyShare stack deployment finished. Services should be accessible on their configured ports."
    - echo "Backend http://<your-vm-ip>:8080"
    - echo "MariaDB <your-vm-ip>:3306 (from other tools/services)"
    - echo "Minio API http://<your-vm-ip>:9000 | Minio Console http://<your-vm-ip>:9001"
    - echo "Frontend http://<your-vm-ip>:5173"
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"