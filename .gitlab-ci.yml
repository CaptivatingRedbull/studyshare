# Define the stages of the pipeline
stages:
  - build
  - deploy # Changed from 'run' to 'deploy' for clarity, as it's deploying to the runner's Docker

# Default settings for all jobs
default:
  image: docker:20.10.16 # Use a Docker image that has the Docker client
  services:
    - docker:20.10.16-dind # Docker-in-Docker service to run Docker commands
  tags:
    - docker # Ensure your GitLab runner has this tag and can execute Docker commands

# Variables used throughout the pipeline
variables:
  # GitLab Container Registry is used by default with these variables
  # CI_REGISTRY_IMAGE will be something like: registry.gitlab.com/your-group/your-project
  BACKEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/studyshare-backend:$CI_COMMIT_REF_SLUG
  FRONTEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/studyshare-frontend:$CI_COMMIT_REF_SLUG
  # For frontend to know where backend is. This assumes backend is accessible via localhost
  # from the runner's perspective if they share the network or backend port is exposed on host.
  # If using a Docker network, this would be http://studyshare-backend-deploy:8080
  VITE_API_URL_GITLAB_CI: "http://localhost:8080" # Adjust if network setup changes

  # Proxy configuration for git and other tools within the job environment
  HTTP_PROXY: "http://proxy.hof-university.de:3128"
  HTTPS_PROXY: "http://proxy.hof-university.de:3128"
  NO_PROXY: "localhost,127.0.0.1,.gitlab.com,gitlab.com,$CI_SERVER_HOST" # Add your GitLab instance if it should be bypassed

# Workflow rules to control when the entire pipeline runs
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true" # Only run for protected branches
      when: always
    - when: never # Do not run for any other case (e.g., non-protected branches, tags without specific rules)

# Job to build the backend Docker image
build_backend:
  stage: build
  before_script:
    - docker info
    # Login to GitLab Container Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "Building backend Docker image-> $BACKEND_IMAGE_TAG"
    - docker build -t $BACKEND_IMAGE_TAG -f backend/Dockerfile backend/
    - echo "Pushing backend image to GitLab Registry..."
    - docker push $BACKEND_IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true"

# Job to build the frontend Docker image
build_frontend:
  stage: build
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "Building frontend Docker image-> $FRONTEND_IMAGE_TAG"
    # Pass VITE_API_URL as a build argument if your Dockerfile is set up to use it
    - >
      docker build
      --build-arg VITE_API_URL=${VITE_API_URL_GITLAB_CI}
      -t $FRONTEND_IMAGE_TAG -f frontend/Dockerfile frontend/
    - echo "Pushing frontend image to GitLab Registry..."
    - docker push $FRONTEND_IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true"

# Job to deploy (run) the backend container
deploy_backend:
  stage: deploy
  needs:
    - job: build_backend # Depends on the successful build of the backend image
      artifacts: false
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "Pulling backend image from GitLab Registry-> $BACKEND_IMAGE_TAG"
    - docker pull $BACKEND_IMAGE_TAG
    - echo "Stopping and removing existing backend container if any..."
    - docker rm -f studyshare-backend-deploy || true
    - echo "Running backend container..."
    - >
      docker run -d --name studyshare-backend-deploy
      -p 8080:8080
      $BACKEND_IMAGE_TAG
    # Basic check: Ensure container is running
    - sleep 10 # Give container time to start
    - docker ps -f name=studyshare-backend-deploy
    - if [ $(docker ps -f name=studyshare-backend-deploy --format "{{.Names}}") != "studyshare-backend-deploy" ]; then echo "Backend container failed to start"; exit 1; fi
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true"

# Job to deploy (run) the frontend container
deploy_frontend:
  stage: deploy
  needs:
    - job: build_frontend # Depends on the successful build of the frontend image
      artifacts: false
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "Pulling frontend image from GitLab Registry-> $FRONTEND_IMAGE_TAG"
    - docker pull $FRONTEND_IMAGE_TAG
    - echo "Stopping and removing existing frontend container if any..."
    - docker rm -f studyshare-frontend-deploy || true
    - echo "Running frontend container..."
    # Nginx in the frontend Dockerfile serves on port 80. We map host 5173 to container 80.
    # The VITE_API_URL_GITLAB_CI is passed as a build arg during `docker build` for the frontend,
    # so it should be baked into the static assets.
    - >
      docker run -d --name studyshare-frontend-deploy
      -p 5173:80
      $FRONTEND_IMAGE_TAG
    # Basic check: Ensure container is running
    - sleep 5 # Give container time to start
    - docker ps -f name=studyshare-frontend-deploy
    - if [ $(docker ps -f name=studyshare-frontend-deploy --format "{{.Names}}") != "studyshare-frontend-deploy" ]; then echo "Frontend container failed to start"; exit 1; fi
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true"

# Optional: Create a Docker network if containers need to communicate via hostname
# This job would run before build and deploy stages.
# setup_docker_network:
#   stage: .pre # Special stage that runs before all others
#   script:
#     - docker network create studyshare-net || true # Create if not exists, ignore error if it already exists
#   rules:
#     - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH_PROTECTED == "true"

# If using the network, add to deploy_backend and deploy_frontend:
#   - --network studyshare-net
# And VITE_API_URL_GITLAB_CI could be "http://studyshare-backend-deploy:8080"

